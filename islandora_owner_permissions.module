<?php

/**
 * @file
 * Module entry hooks.
 */

// Permissions.
const ISLANDORA_OWNER_PERMISSIONS_EDIT_METADATA = 'islandora owner edit metadata';
const ISLANDORA_OWNER_PERMISSIONS_REPLACE_DATASTREAMS = 'islandora owner replace datastreams';
const ISLANDORA_OWNER_PERMISSIONS_CREATE_DATASTREAMS = 'islandora owner create datastreams';
const ISLANDORA_OWNER_PERMISSIONS_REMOVE_OBJECTS = 'islandora owner remove objects';
const ISLANDORA_OWNER_PERMISSIONS_MANAGE_OBJECT_PROPERTIES = 'islandora owner manage object properties';
const ISLANDORA_OWNER_PERMISSIONS_REVERT_DATASTREAMS = 'islandora owner revert datastreams';
const ISLANDORA_OWNER_PERMISSIONS_REGENERATE_DERIVATIVES = 'islandora owner regenerate derivatives';

const ISLANDORA_OWNER_PROXY_PERMISSIONS_EDIT_METADATA = 'islandora owner proxy edit metadata';
const ISLANDORA_OWNER_PROXY_PERMISSIONS_REPLACE_DATASTREAMS = 'islandora owner proxy replace datastreams';
const ISLANDORA_OWNER_PROXY_PERMISSIONS_CREATE_DATASTREAMS = 'islandora owner proxy create datastreams';
const ISLANDORA_OWNER_PROXY_PERMISSIONS_REMOVE_OBJECTS = 'islandora owner proxy remove objects';
const ISLANDORA_OWNER_PROXY_PERMISSIONS_MANAGE_OBJECT_PROPERTIES = 'islandora owner proxy manage object properties';
const ISLANDORA_OWNER_PROXY_PERMISSIONS_REVERT_DATASTREAMS = 'islandora owner proxy revert datastreams';
const ISLANDORA_OWNER_PROXY_PERMISSIONS_REGENERATE_DERIVATIVES = 'islandora owner proxy regenerate derivatives';

/**
 * Implements hook_menu().
 */
function islandora_owner_permissions_menu() {
  return array(
    'islandora/object/%islandora_object/manage/owner_proxies' => array(
      'title' => 'Owner Proxies',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_owner_permissions_manage_proxies_form', 2),
      'type' => MENU_LOCAL_TASK,
      'file' => 'includes/manage_proxies.form.inc',
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_MANAGE_PROPERTIES, 2),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function islandora_owner_permissions_permission() {
  return array(
    ISLANDORA_OWNER_PERMISSIONS_EDIT_METADATA => array(
      'title' => t('Edit Metadata on Owned Objects'),
      'description' => t('Allows a user to edit metadata on their owned objects.'),
    ),
    ISLANDORA_OWNER_PERMISSIONS_REPLACE_DATASTREAMS => array(
      'title' => t('Replace Datastreams on Owned Objects'),
      'description' => t('Allows a user to replace datastreams on their owned objects.'),
    ),
    ISLANDORA_OWNER_PERMISSIONS_CREATE_DATASTREAMS => array(
      'title' => t('Create Datastreams on Owned Objects'),
      'description' => t('Allows a user to create datastreams on their owned objects.'),
    ),
    ISLANDORA_OWNER_PERMISSIONS_REMOVE_OBJECTS => array(
      'title' => t('Remove Owned Objects'),
      'description' => t('Allows a user to purge their owned objects.'),
    ),
    ISLANDORA_OWNER_PERMISSIONS_MANAGE_OBJECT_PROPERTIES => array(
      'title' => t('Manage Owned Objects Properties'),
      'description' => t('Allows a user to manage the properties of their owned objects.'),
    ),
    ISLANDORA_OWNER_PERMISSIONS_REVERT_DATASTREAMS => array(
      'title' => t('Revert Datastreams on Owned Objects'),
      'description' => t('Allows a user to revert datastreams on their owned objects.'),
    ),
    ISLANDORA_OWNER_PERMISSIONS_REGENERATE_DERIVATIVES => array(
      'title' => t('Regenerate Derivatives on Owned Objects'),
      'description' => t('Allows a user to regenerate derivatives on their owned objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_EDIT_METADATA => array(
      'title' => t('Edit Metadata on Owned Objects'),
      'description' => t('Allows a user to edit metadata on proxied objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_REPLACE_DATASTREAMS => array(
      'title' => t('Replace Datastreams on Owned Objects'),
      'description' => t('Allows a user to replace datastreams on proxied objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_CREATE_DATASTREAMS => array(
      'title' => t('Create Datastreams on Owned Objects'),
      'description' => t('Allows a user to create datastreams on proxied objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_REMOVE_OBJECTS => array(
      'title' => t('Remove Owned Objects'),
      'description' => t('Allows a user to purge proxied objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_MANAGE_OBJECT_PROPERTIES => array(
      'title' => t('Manage Owned Objects Properties'),
      'description' => t('Allows a user to manage the properties of proxied objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_REVERT_DATASTREAMS => array(
      'title' => t('Revert Datastreams on Owned Objects'),
      'description' => t('Allows a user to revert datastreams on proxied objects.'),
    ),
    ISLANDORA_OWNER_PROXY_PERMISSIONS_REGENERATE_DERIVATIVES => array(
      'title' => t('Regenerate Derivatives on Owned Objects'),
      'description' => t('Allows a user to regenerate derivatives on proxied objects.'),
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 *
 * We are replacing Islandora's datasteam and object access
 * implementations with our own.
 */
function islandora_owner_permissions_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'islandora_datastream_access' && isset($implementations['islandora'])) {
    unset($implementations['islandora']);
  }
  elseif ($hook == 'islandora_object_access' && isset($implementations['islandora'])) {
    unset($implementations['islandora']);
  }
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_owner_permissions_islandora_object_access($op, $object, $user) {
  module_load_include('inc', 'islandora_owner_permissions', 'includes/utilities');
  $perm_map = islandora_owner_permissions_permission_map();
  // Call original if we are not the owner or don't override the op.
  if (!isset($user->name) || $user->name != $object->owner || !array_key_exists($op, $perm_map)) {
    return islandora_islandora_object_access($op, $object, $user);
  }
  else {
    return user_access($perm_map[$op], $user);
  }
}

/**
 * Implements hook_islandora_datastream_access().
 */
function islandora_owner_permissions_islandora_datastream_access($op, $datastream, $user) {
  module_load_include('inc', 'islandora_owner_permissions', 'includes/utilities');
  $perm_map = islandora_owner_permissions_permission_map();
  // Call original if we are not the owner or don't override the op.
  if (!isset($user->name) || $user->name != $datastream->parent->owner || !array_key_exists($op, $perm_map)) {
    return islandora_islandora_datastream_access($op, $datastream, $user);
  }
  else {
    return user_access($perm_map[$op], $user);
  }
}

/**
 * Implements hook_user_delete().
 *
 * Remove deleted users from our db.
 */
function islandora_owner_permissions_user_delete($user) {
  module_load_include('inc', 'islandora_owner_permissions', 'includes/db');
  islandora_owner_permissions_remove_user_from_db($user->uid);
}

/**
 * Implements hook_islandora_object_purged().
 *
 * Remove deleted objects from our db.
 */
function islandora_owner_permissions_islandora_object_purged($pid) {
  module_load_include('inc', 'islandora_owner_permissions', 'includes/db');
  islandora_owner_permissions_remove_object_from_db($pid);
}
